h = 1:1000
h
mean(h)
EMA(h)
plot(h)
install.packages("quantmod")
EMA(h)
h
h = h+h
h
mean(h)
h/12341234124
1-9
(1-2)
1231234/1234123412423
pi
print h
h
h
h = 12:43
h
plot h
plot(h)
demo()
demo(graphics)
demo(Japanese)
demo(package = .packages(all.available = TRUE))
demo(image())
demos)quantmod::add_DEMA()
demos.quantmod()
demos(quantmod)
demo(chartSeries)
demo(quantmod)
demo(lattice)
demo(graphics.off(Hershey))
demo(zoo)
help
help()
aefsd
demos
demo
demo(zoo)
demo()
http://citibank.com.au/
install.packages(z00)
install.packages(zoo)
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
library("zoo", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(zoo)
library("zoo")
install.packages(zoo)
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
plot(aapl)
aapl = 1
aapl
aapl<-read.zoo("aapl.csv", + sep=",", header=TRUE, format = ("%Y-%m-%d"))
library("quantmod", lib.loc="/usr/local/lib/R/3.2/site-library")
install.packages(c("boot", "Matrix", "mgcv", "nlme", "nnet"), lib="/usr/local/Cellar/r/3.2.3/R.framework/Versions/3.2/Resources/library")
install.packages("Quandl")
Quandl("YAHOO/ASX_FMG_AX")
library("Quandl", lib.loc="/usr/local/lib/R/3.2/site-library")
Quandl("YAHOO/ASX_FMG_AX")
Quandl("YAHOO/ASX_FMG_AX")
library("curl", lib.loc="/usr/local/lib/R/3.2/site-library")
FMG = Quandl("YAHOO/ASX_FMG_AX")
plot(FMG)
FMG
getwd()
cd RStudio
getwd()
getwd()
cd()
ls()
dir()
39
s = 3214234
s
library(datasets)
data(iris)
?iris
class(iris)
iris
mean(iris[,1])
lapply(iris,mean[,1])
apply(iris[,1], mean)
mean(iris[101:150,1])
apply(iris[, 1:4], 1, mean)
?apply
apply(iris[, 1:4], 2, mean)
?rnorm
install.packages("gfortran")
library(datasets)
data(mtcars)
data(mtcars)
?mtcars
?rnorm
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("quantstrat", repos="http://R-Forge.R-project.org", type="source")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
install.packages("PerformanceAnalytics")
install.packages("~/Downloads/blotter_0.9.1741.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/quantstrat_0.9.1739.tar.gz", repos = NULL, type = "source")
library("quantstrat", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
mtcars
mean(mtcards[,1])
mean(mtcars[,1])
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
debug(ls)
mtcars
mtcars
install_from_swirl("Exploratory Data Analysis")
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install_from_swirl("Exploratory Data Analysis")
install_from_swirl("Exploratory Data Analysis")
swirl()
main()
0
library(mpg)
table(airquality$Month)
boxplot(Ozone~Month,airquality)
boxplot(Ozone~Month,airquality, xlab="Month",ylab="Ozone (ppb)", col.axis = "blue", col.lab="red")
boxplot(Ozone~Month,airquality, xlab="Month",ylab="Ozone (ppb)", col.axis = "blue", col.lab="red",main="Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
plot(airquality$Wind,airquality$Ozone)
with(airquality, plot(airquality$Wind, airquality$Ozone))
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New
| York City")
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par('fg')
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main="Wind and Ozone in NYC")
a
x
may
may <- airquality
may <- subset(airquality, Month==5)
plot(may$Wind, may$Ozone, col="blue")
plot(may$Wind, may$Ozone, col="blue",pch=17)
plot(may$Wind, may$Ozone,col="blue",pch=17)
points(may$Wind, may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, Month!=5)
plot(notmay$Wind, notmay$Ozone,col="red",pch=17)
plot(notmay$Wind, notmay$Ozone,col="red",pch=8)
points(notmay$Wind, notmay$Ozone,col="red",pch=8)
legend("topright",c(17,8),c("blue","red"),c ("May","Other Months") )
legend("topright",c(17,8),c("blue","red"),c("May","Other Months") )
legend()
legend(topright)
legend("topright")
skip()
abline(h-10)
abline(h-10)
absline(h-10)
abline(h=10)
abline(v=median(airquality$Wind),lty=2,lwd=2)
par(mfrow(c(1,2)))
par(mfrow = (1,2))
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
mtext("Ozone and Weather in New
aSF
WAFD
dasfasdf
a
source('~/RCoursera/Getting_and_Cleaning_Data/Assignment/runAnalysis3.R')
siwrl
swirl()
library(swirl)
swirl()
diamonds
str(diamonds)
hist(diamonds$price)
qplot(price,data=diamonds)
range(diamonds$price)
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18497/30, fill=cut
asdf
qplot(price,data=diamonds,binwidth=18497/30, fill=cut)
qplot(price,data=diamonds,geom="density")
qplot(price,data=diamonds,geom="density",color=cut
asd
qplot(price,data=diamonds,geom="density",color=cut)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds, shape=cut
asd
qplot(carat,price,data=diamonds, shape=cut
dasf
qplot(carat,price,data=diamonds, shape=cut)
qplot(carat,price,data=diamonds, color=cut)
qplot(carat,price,data=diamonds, color=cut,geom_smooth="lm")
qplot(carat,price,data=diamonds, color=cut)+geom_smooth="lm"
qplot(carat,price,data=diamonds, color=cut,geom_smooth=lm)
qplot()
qplot(carat,price,data=diamonds, color=cut)+geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut)+geom_smooth(method="lm")+facets(formula=.~cut
adfds
qplot(carat,price,data=diamonds, color=cut)+geom_smooth(method="lm")+facets(formula=.~cut)
qplot()
qplot(carat,price,data=diamonds, color=cut,facets=.~cut+geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets=.~cut+geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut,facets=.~cut)+geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth,price))
g
summar(g)
summary(g)
g <- geom_point(alpha=1/3)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat,seq(0,1, length=4), na.rm = TRUE)
cutpoints
skip()
g <- ggplot(diamones, aes(depth,price))
g <- ggplot(diamonds, aes(depth,price))
g <- ggplot(diamonds, aes(depth,price),facet_grid(cut ~ car2))+geom_point(alpha=1/3)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm",size=3,color="pink")
ggplot(diamonds, aes(carat,price), geom_boxplot())
ggplot(diamonds,aes(carat,price)+geom_boxplot()+facet_grid(.~cut))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
source('~/Dropbox/DataCamp/Intro to Computational Finance with R/Chapter 1/Load the Starbucks Data.R')
setwd()
setwd("~/Dropbox/DataCamp/Intro to Computational Finance with R")
setwd("~/Dropbox/DataCamp/Intro to Computational Finance with R/Chapter 1")
source('~/Dropbox/DataCamp/Intro to Computational Finance with R/Chapter 1/Load the Starbucks Data.R')
source('~/Dropbox/DataCamp/Intro to Computational Finance with R/Chapter 1/Load the Starbucks Data.R')
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
sbux_df
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
class(sbux_df$Date)
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
source('~/Dropbox/DataCamp/Intro_Computational_Finance/Chapter 1/Load the Starbucks Data.R')
install.packages("RQuantLib")
install.packages("~/Desktop/RQuantLib_0.4.3.tar.gz", repos = NULL, type = "source")
install.packages(RQuantLib)
